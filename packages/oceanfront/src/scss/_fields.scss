@mixin field-text-base {
  font-family: $font-family-input;
  font-weight: $font-weight-input;
  letter-spacing: $letter-spacing-input;
  line-height: $line-height-input;
}

.of--small {
  --field-font-size: #{$font-size-input-sm};
}
.of--large {
  --field-font-size: #{$font-size-input-lg};
}

.of--text-numeric {
  font-variant-numeric: lining-nums tabular-nums;
}
.of--text-placeholder {
  color: #{use-color(field-color, placeholder)};
  opacity: #{use-opacity(field-color, placeholder)};
}

.of--align-left {
  text-align: left;
}
.of--align-right {
  text-align: right;
}
.of--align-center {
  text-align: center;
}
.of--align-start {
  text-align: start;
  justify-content: flex-start;
}
.of--align-end {
  text-align: end;
  justify-content: flex-end;
}

.of--cursor-default {
  cursor: default;
}
.of--cursor-pointer {
  cursor: pointer;
}
.of--cursor-text {
  cursor: text;
}
.of--block{
  --of-field-width: 100%;
}

.of-group {
  --group-pad: calc(0.5em - 1px);
  --elevation-level: 0;
  border-radius: 5px;
  border: 1px solid var(--of-color-outline);
  padding: var(--group-pad) 0;
}
.of-group-label {
  color: #{use-color(field-label)};
  opacity: #{use-opacity(field-label)};
  font-size: 90%;
  padding-left: 0.7em;
  margin-bottom: var(--group-pad);
}
.of-group:hover > .of-group-label {
  color: #{use-color(field-label, hover)};
  opacity: #{use-opacity(field-label, hover)};
}
.of-group:focus-within,
.of-group.of--focused {
  --elevation-level: 0.3;
  > .of-group-label {
    color: #{use-color(field-label, focus)};
    opacity: #{use-opacity(field-label, focus)};
  }
}
.of-group-row {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: 1fr;
  &.of--pad {
    padding: 0 var(--group-pad) var(--group-pad);
    grid-gap: var(--group-pad);
  }
}

.of-field {
  position: relative;
}

.of-field.of--density-3.of--label-frame.of-toggle-field.of--variant-outlined {
  .of-toggle-wrapper {
    padding: calc(var(--field-v-pad) * 1.3) var(--field-h-pad)
      calc(var(--field-v-pad) * 0.7);
  }
}

.of-toggle-input,
.of-slider-field,
.of-file-field {
  .of-field-input {
    // input is invisible and covers the entire container
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    -webkit-appearance: none;
    appearance: none;
    cursor: inherit;
    font-size: inherit;
    margin: 0;
    opacity: 0;
    outline: none;
    &::-webkit-file-upload-button {
      cursor: inherit;
    }
  }
}

.of-file-input {
  display: flex;
  position: relative;
}

.of-toggle-wrapper {
  display: flex;
  flex: auto;

  .of-field-inner > & {
    padding-left: 0;
    padding-right: 0;
  }

  .of-toggle-input {
    align-self: center;
    flex: none;
    padding: 0 var(--field-h-pad, 0.4em) 0 0;
    justify-content: center;
    position: relative;
    .of--checked & {
      color: var(--of-primary-tint, inherit);
    }
  }
}

.of-field {
  @include define-color-opacity(
    field-border,
    (var(--of-primary-tint), 50%),
    (
      hover: var(--of-primary-tint) 60%,
      disabled: var(--of-primary-tint) 60%,
      focus: var(--of-primary-tint) 100%,
      invalid: var(--of-color-error) 100%,
    )
  );
  @include define-color-opacity(
    field-filled-label,
    (var(--of-primary-tint), 80%),
    (
      hover: var(--of-primary-tint) 90%,
      disabled: var(--of-primary-tint) 55%,
      focus: var(--of-primary-tint) 100%,
      invalid: var(--of-color-error) 100%,
    )
  );
  @include define-color-opacity(
    field-filled-bg,
    (var(--of-color-on-surface) 4%),
    (
      hover: var(--of-color-on-surface) 6%,
      focus: var(--of-color-on-surface) 8%,
    )
  );
  @include define-color-opacity(
    field-color,
    (var(--of-color-on-surface), 100%),
    (
      disabled: var(--of-color-on-surface) 38%,
      placeholder: var(--of-color-on-surface) 55%,
    )
  );
  @include define-color-opacity(
    field-filled-color,
    (var(--of-color-on-surface), 100%),
    (
      disabled: var(--of-color-on-surface) 38%,
      placeholder: var(--of-color-on-surface) 55%,
    )
  );
}

.of-field,
.of-group {
  @include define-color-opacity(
    field-label,
    (var(--of-color-on-surface), 80%),
    (
      hover: var(--of-primary-tint) 90%,
      disabled: var(--of-primary-tint) 55%,
      focus: var(--of-primary-tint) 100%,
      invalid: var(--of-color-error) 100%,
    )
  );
}

.of-field {
  --field-width: var(--of-field-width);
  --field-background: transparent;
  --field-background-opacity: 0;
  --field-border-color: transparent;
  --field-border-opacity: 1;
  --field-border-radius: #{$border-radius-input};
  --field-border-style: solid;
  --field-border-width: 1px;
  --field-color: #{use-color(field-color)};
  --field-opacity: #{use-opacity(field-color)};
  --field-font-size: #{$font-size-input};
  --field-label-color: #{use-color(field-label)};
  --field-label-opacity: #{use-opacity(field-label)};
  --field-label-width: var(--of-field-label-width, 50%);
  --field-input-height: calc(var(--field-line-height) * 1em);
  --field-line-height: #{$line-height-input};
  --field-h-pad: 0.5em;
  --field-v-pad-base: 1.125em;
  --field-v-pad: var(--field-v-pad-base);
  --field-size: var(--of-field-size);
  --field-size-append: 0px;
  --field-size-prepend: 0px;

  &.of--small {
    --field-font-size: #{$font-size-input-sm};
  }
  &.of--large {
    --field-font-size: #{$font-size-input-lg};
  }
  .of--layer-bg {
    background-color: var(--field-background);
    opacity: var(--field-background-opacity);
  }

  &.of--interactive {
    --field-border-color: #{use-color(field-border)};
    --field-border-opacity: #{use-opacity(field-border)};
  }
  &.of--mode-disabled {
    --field-border-color: #{use-color(field-border, disabled)};
    --field-border-opacity: #{use-opacity(field-border, disabled)};
    --field-color: #{use-color(field-color, disabled)};
    --field-opacity: #{use-opacity(field-color, disabled)};
    --field-label-color: #{use-color(field-label, disabled)};
    --field-label-opacity: #{use-opacity(field-label, disabled)};
  }
  &.of--mode-editable:hover {
    &:not(.of--invalid):not(.of--undecorated) {
      --field-border-color: #{use-color(field-border, hover)};
      --field-border-opacity: #{use-opacity(field-border, hover)};
    }
    --field-label-color: #{use-color(field-label, hover)};
    --field-label-opacity: #{use-opacity(field-label, hover)};
  }
  &.of--interactive.of--focused {
    &:not(.of--invalid):not(.of--undecorated) {
      --field-border-color: #{use-color(field-border, focus)};
      --field-border-opacity: #{use-opacity(field-border, focus)};
    }
    --field-label-color: #{use-color(field-label, focus)};
    --field-label-opacity: #{use-opacity(field-label, focus)};
  }
  &.of--invalid {
    --field-label-color: #{use-color(field-label, invalid)};
    --field-label-opacity: #{use-opacity(field-label, invalid)};

    --field-border-color: #{use-color(field-border, invalid)};
    --field-border-opacity: #{use-opacity(field-border, invalid)};
  }
  &.of--mode-fixed {
    .of-toggle-input {
      --field-color: #{use-color(field-color, disabled)};
      --field-opacity: #{use-opacity(field-color, disabled)};
    }
  }

  box-sizing: border-box;
  color: var(--field-color);
  display: flex;
  flex: 1 0 auto; // var(--field-size);
  flex-flow: column nowrap;
  font-size: var(--field-font-size);
  line-height: normal;
  max-width: 100%;
  outline: none;
  text-align: start;
  // width: calc(min(100%, var(--field-size)));
  vertical-align: top;
  @include no-select;

  &.of--inline {
    display: inline-flex;
    width: var(--field-size);
  }

  &.of--label-left,
  &.of--label-right {
    display: grid;
    grid-template-columns: var(--field-label-width) auto;

    > .of-field-main-label {
      align-items: center;
      display: flex;
      padding: 0 var(--field-h-pad);
    }

    &.of--inline {
      display: inline-grid;
    }
  }
  &.of--label-left {
    grid-template-areas: 'label main' 'label caption';
  }
  &.of--label-right {
    grid-template-areas: 'main label' 'caption label';
  }
  &.of--label-top > .of-field-main-label {
    margin-bottom: 0.25em;
    padding-left: var(--field-h-pad);
  }

  &.of--rounded {
    --field-border-radius: calc(var(--field-v-pad) + 0.5em + 2px);
  }

  &.of--undecorated {
    --field-border-opacity: 0;

    .of--layer-bg {
      opacity: 0;
    }
  }

  > .of-field-main > .of-field-body > .of-field-inner > textarea {
    box-sizing: border-box;
    margin: 0 var(--field-border-width) 2px 0;
    padding: var(--field-v-pad) var(--field-h-pad);
    resize: vertical;
  }
}

.of-field.of--density-0 {
  --field-v-pad-base: 1.125em;
}
.of-field.of--density-1 {
  --field-v-pad-base: 0.875em;
}
.of-field.of--density-2 {
  --field-v-pad-base: 0.625em;
}
.of-field.of--density-3 {
  --field-v-pad-base: 0.375em;
}

.of-field-main-label {
  grid-area: label;
}
.of-field-main {
  box-sizing: border-box;
  display: flex;
  flex-flow: column nowrap;
  grid-area: main;
  min-height: calc(2 * var(--field-v-pad) + var(--field-input-height));
  //justify-content: center;
  outline: none;
  position: relative;
}
.of-field-caption {
  grid-area: caption;
}

.of-field-body {
  opacity: var(--field-opacity);
  align-items: flex-start;
  box-sizing: border-box;
  display: flex;
  margin: calc(0px - var(--field-border-width));
  min-height: calc(var(--field-v-pad) + var(--field-input-height));
  position: relative;
  max-width: 100%;

  @include field-text-base;
}

.of-field-inner {
  display: flex;
  width: 0; // allow element to resize smaller in firefox when nowrap is used

  > *:not(.of--unpadded):not([class*='of--density-']) {
    padding: var(--field-v-pad) var(--field-h-pad);
    &.of-field-inner-prepend {
      padding-right: 0;
    }
  }
}

.of-field-inner,
.of-field-content-text {
  cursor: inherit;
  flex: auto;
  text-overflow: ellipsis;
  font-size: var(--field-font-size);
  &:empty::after {
    content: '\200b';
  }
}
.of-field-content-text {
  overflow: hidden;
}

.of-field-input {
  // caret-color
  color: inherit;
  display: block;
  flex: auto;
  font-family: inherit;
  line-height: inherit;
  font-size: var(--field-font-size);
  // may want to restrict to certain variants:
  appearance: none;
  background: none;
  border: none;
  border-radius: 0;
  box-sizing: border-box;
  // height: 100%;
  width: 100%;
  &::placeholder {
    color: #{use-color(field-color, placeholder)};
    opacity: #{use-opacity(field-color, placeholder)};
  }
}

.of-field-input,
.of-field-content-text {
  font-weight: normal;
  margin: 0;
  outline: none;
  // letter-spacing
}

.of-field-content-text {
  box-sizing: content-box;
  min-height: 1.25em;
}

.of-field-fixed-content {
  user-select: text;
}

.of-field-prepend,
.of-field-append {
  align-self: center;
  box-sizing: border-box;
  display: flex;
  flex: none;
}
.of-field-prepend {
  padding-left: var(--field-h-pad);
}
.of-field-append {
  padding-right: var(--field-h-pad);
}

.of-field.of--variant-outlined {
  .of--layer {
    border-radius: var(--field-border-radius);
  }
  .of--layer-brd {
    border: var(--field-border-width) var(--field-border-style) transparent;
  }

  &:not(.of--label-frame) .of--layer-brd {
    border-color: var(--field-border-color);
    opacity: var(--field-border-opacity);
  }
  > .of-field-inner {
    margin-top: -1px;
  }

  &.of--label-frame {
    --field-h-pad: 0.75em;

    > .of-field-main {
      border: none;

      > .of-field-body {
        margin: 0;

        .of-field-inner {
          opacity: 0;
          transition: opacity 180ms;
          will-change: opacity;
        }
      }

      > .of-field-header {
        display: flex;
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;

        &::before {
          border: var(--field-border-width) var(--field-border-style)
            var(--field-border-color);
          opacity: var(--field-border-opacity);
          border-radius: var(--field-border-radius) 0 0
            var(--field-border-radius);
          border-right: none;
          box-sizing: border-box;
          content: '';
          flex: 0 0
            calc(max(var(--field-h-pad), var(--field-border-radius)) - 0.25em);
          transition: border-color 120ms;
        }
        &::after {
          border: var(--field-border-width) var(--field-border-style)
            var(--field-border-color);
          opacity: var(--field-border-opacity);
          border-radius: 0 var(--field-border-radius) var(--field-border-radius)
            0; // inherit?
          border-left: none;
          content: '';
          flex: auto;
          transition: border-color 120ms;
        }

        .of-field-header-label {
          max-width: calc(100% - 2 * var(--field-h-pad));
          padding: 0 0.25em;
          position: relative;

          &::after {
            border-bottom: var(--field-border-width) var(--field-border-style)
              var(--field-border-color);
            border-top: var(--field-border-width) var(--field-border-style)
              var(--field-border-color);
            opacity: var(--field-border-opacity);
            content: '';
            box-sizing: border-box;
            transition: border-color 120ms;
            position: absolute;
            left: 0;
            right: 0;
            top: 0;
            bottom: 0;
          }

          .of-field-label {
            position: relative;
            top: 0;
            display: block;
            font-size: 0.75em;
            transform: translateX(var(--field-size-prepend)) scale(1.3333)
              translateY(var(--field-v-pad));
            transform-origin: left top;
            transition: transform 150ms;
            backface-visibility: hidden; // avoid some jumping?
            // will-change: transform; // FIXME currently blurry in chrome
          }
        }
      }
    }

    &.of--interactive.of--focused {
      --field-border-width: 2px;
    }

    padding-top: 0.675em;

    &.of--interactive.of--focused,
    &.of--active {
      > .of-field-main {
        box-shadow: none;

        > .of-field-header {
          .of-field-header-label {
            &::after {
              border-top-color: transparent;
            }

            .of-field-label {
              transform: translateY(-0.675em);
            }
          }
        }

        > .of-field-body > .of-field-inner {
          opacity: 1;
        }
      }
    }
  }
}

.of-field.of--variant-filled {
  .of--layer-brd {
    border: var(--field-border-width) var(--field-border-style)
      var(--field-border-color);
    border-color: transparent transparent var(--field-border-color) transparent;
    opacity: var(--field-border-opacity);
  }

  &.of--mode-editable,
  &.of--mode-locked {
    --field-background: #{use-color(field-filled-bg)};
    --field-background-opacity: #{use-opacity(field-filled-bg)};
  }
  &.of--interactive {
    --field-color: #{use-color(field-filled-color)};
    --field-opacity: #{use-opacity(field-filled-color)};
    .of--layer {
      border-radius: var(--field-border-radius) var(--field-border-radius) 0 0;
    }
  }
  &.of--mode-editable:hover {
    --field-background: #{use-color(field-filled-bg, hover)};
    --field-background-opacity: #{use-opacity(field-filled-bg, hover)};
  }
  &.of--mode-disabled {
    --field-color: #{use-color(field-filled-color, disabled)};
    --field-opacity: #{use-opacity(field-filled-color, disabled)};
    --field-border-style: dashed;
    --field-label-color: #{use-color(field-filled-label, disabled)};
    --field-label-opacity: #{use-opacity(field-filled-label, disabled)};
  }
  &.of--interactive.of--focused {
    --field-background: #{use-color(field-filled-bg, focus)};
    --field-background-opacity: #{use-opacity(field-filled-bg, focus)};
    --field-label-color: #{use-color(field-filled-label, focus)};
    --field-label-opacity: #{use-opacity(field-filled-label, focus)};
  }

  &.of--interactive .of--layer-brd::after {
    // ripple
    background: #{use-color(field-border, focus)};
    content: '';
    height: 2px;
    position: absolute;
    bottom: calc(0px - var(--field-border-width));
    left: 0;
    width: 100%;
    opacity: 0;
    transform: scaleX(0);
    transform-origin: center;
    transition: opacity 90ms, transform 150ms;
    will-change: opacity, transform;
    z-index: 1;
  }
  &.of--interactive.of--invalid .of--layer-brd::after {
    background: #{use-color(field-border, invalid)};
  }
  &.of--interactive.of--focused .of--layer-brd::after {
    opacity: #{use-opacity(field-border, focus)};
    transform: scaleX(1);
  }
  &.of--mode-editable:hover {
    --field-label-color: #{use-color(field-filled-label, hover)};
    --field-label-opacity: #{use-opacity(field-filled-label, hover)};
  }

  &.of--mode-disabled {
    --field-label-color: #{use-color(field-filled-label, disabled)};
    --field-label-opacity: #{use-opacity(field-filled-label, disabled)};
  }

  &.of--interactive.of--focused {
    --field-label-color: #{use-color(field-filled-label, focus)};
    --field-label-opacity: #{use-opacity(field-filled-label, focus)};
  }

  &.of--label-frame {
    --field-h-pad: 0.75em;
    --field-v-pad: calc(var(--field-v-pad-base) - 0.3em);

    > .of-field-main {
      min-height: calc(
        1em + 2 * var(--field-v-pad) + var(--field-input-height)
      );
      padding: 0;

      .of-field-header {
        position: absolute;
        left: 0;
        right: 0;
        top: -1px;
        margin: calc(0px - var(--field-border-width));

        .of-field-header-label {
          box-sizing: border-box;
          line-height: 1;
          padding: calc(var(--field-v-pad) / 2)
            calc(var(--field-size-append) + var(--field-h-pad))
            calc(var(--field-v-pad) / 2)
            calc(var(--field-size-prepend) + var(--field-h-pad));

          .of-field-label {
            font-size: 0.75em;
          }
        }
      }

      > .of-field-body {
        > .of-field-inner {
          margin-top: 1em;
        }
      }
    }
  }
}

.of-field.of--required {
  .of--icon-required {
    vertical-align: top;

    svg {
      fill: #c10015;
      font-size: 0.6em;
      height: 1em;
      width: 0.8em;
    }
  }
}

.of-field-label {
  align-self: center;
  color: var(--field-label-color);
  opacity: var(--field-label-opacity);
  // cursor: inherit;
  font-size: 0.8em;
  text-overflow: ellipsis;
  transition: color 100ms;
  white-space: nowrap;
  word-wrap: break-word;
}

// container around inline toggle field (checkbox or switch)
.of-toggle {
  display: inline-flex;
  outline: none;
}

.of-switch {
  align-items: center;
  box-sizing: border-box;
  display: inline-flex;
  font-size: calc(var(--field-font-size, 1em) * 1.2);
  height: calc(var(--field-font-size, 1em) * 1.2);
  line-height: normal;
  padding: calc(var(--field-font-size, 1em) * 0.25);
  position: relative;
  vertical-align: top;
  width: calc(var(--field-font-size, 1em) * 2.5);

  &-thumb {
    background-color: var(--field-color);
    border-radius: 50%;
    box-sizing: border-box;
    box-shadow: 0 2px 1px 0 rgba(100, 100, 100, 0.15),
      0 -2px 1px 0 rgba(100, 100, 100, 0.15);
    content: '';
    height: 1em;
    left: 0;
    position: absolute;
    top: 0;
    transition: left 0.15s ease-in-out, background-color 0.15s ease-in-out;
    width: 1em;
  }

  &-track {
    border: 1px solid var(--field-color);
    border-radius: 1em;
    box-sizing: border-box;
    flex: auto;
    height: 100%;
    transition: background-color 0.15s ease-in-out, border 0.15s ease-in-out;
  }
  .of--checked & {
    .of-switch-thumb {
      background-color: var(--of-primary-tint);
      left: calc(1em - 1px);
    }
    .of-switch-track {
      background-color: var(--of-primary-tint);
      opacity: 72%;
    }
  }
  &:hover {
    .of-switch-thumb {
      box-shadow: 0 0 5px 9px rgba(100, 100, 100, 0.15);
    }
  }
  .of--focused & {
    .of-switch-thumb {
      box-shadow: 0 0 0 9px rgba(100, 100, 100, 0.2);
    }
  }
}

.of-slider {
  --field-h-pad: 1.2em;

  align-items: center;
  display: flex;
  height: 1em;
  margin: 0.25em 0;
  width: 100%;

  &-track {
    width: 100%;
    height: 0.5em;
    position: relative;
    cursor: pointer;

    &::after {
      background-color: #{use-color(field-border)};
      border-radius: 0.25em;
      content: '';
      display: block;
      position: absolute;
      opacity: 0.5;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
    }
  }
  &-track-process {
    background-color: #{use-color(field-border)};
    border-radius: 0.25em 0 0 0.25em;
    display: block;
    position: absolute;
    height: 100%;
  }
  &-thumb {
    background-color: var(--of-primary-tint);
    border-radius: 50%;
    box-shadow: 0 2px 1px 0 rgba(100, 100, 100, 0.15);
    box-sizing: border-box;
    height: 1.3em;
    width: 1.3em;
    position: absolute;
    transform: translateX(-50%);
    z-index: 2;
    cursor: pointer;

    &.of--moved {
      box-shadow: 0 0 5px 9px rgba(100, 100, 100, 0.2);
      .of-slider-label-container {
        display: block;
      }
    }
  }
  &:hover {
    .of-slider-thumb {
      box-shadow: 0 0 5px 9px rgba(100, 100, 100, 0.15);
    }
  }
  &.of--focused {
    .of-slider-thumb {
      box-shadow: 0 0 0 9px rgba(100, 100, 100, 0.2);
    }
  }
  &-label-container {
    background-color: var(--of-primary-tint);
    border-color: var(--of-primary-tint);
    border-radius: 5px;
    box-sizing: content-box;
    color: #fff;
    font-size: 14px;
    min-width: 20px;
    padding: 4px 5px;
    position: absolute;
    right: -0.5em;
    text-align: center;
    top: -2.2em;
    white-space: nowrap;
    width: 1.8em;
    display: none;

    &::after {
      top: 100%;
      left: 50%;
      transform: translate(-50%, 0);
      height: 0;
      width: 0;
      border-color: transparent;
      border-style: solid;
      border-width: 5px;
      border-top-color: inherit;
      content: '';
      position: absolute;
    }
  }
  &:not(.of--readonly) .of-slider-thumb {
    cursor: pointer;
  }
}

.of-color-swatch {
  & > .of-color-swatch-border {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    border: 1px solid #{use-color(field-border)};
    opacity: #{use-opacity(field-border)};
    border-radius: 2px;
  }
  position: relative;
  border-radius: 2px;
  box-sizing: border-box;
  width: 2.5em;
  height: 1.2em;
}

.of-field.of-toggle-field.of--mode-fixed {
  .of-switch {
    .of-switch-track {
      opacity: 0.2;
    }
    .of-switch-thumb {
      background-color: #989c92;
    }
  }
  .of-icon svg {
    fill: #989c92;
  }
}
.radio-group {
  width: 100%;
  display: flex;
}
.of--column {
  flex-direction: column;
}
.of--row {
  flex-direction: row;
}
